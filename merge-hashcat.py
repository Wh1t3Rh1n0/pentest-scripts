#!/usr/bin/env python

import sys

self_name = sys.argv[0].split('/')[-1]

usage = """
%(name)s
%(underline)s
Matches passwords cracked with hashcat to their usernames.

Usage: %(name)s <user:hash file> <hash:password file>

Notes: The "hash:password" file is created by hashcat's -o option.

       The "user:hash" file is easy to create using your original hashdump and
       the "cut" command. An example of creating this file from hashes dumped
       from a Windows domain controller follows:
       
       cat raw_dump.txt | cut -d ':' -f 1,4 > dumped-users_hashes.txt
""" % {'name': self_name,
       'underline': ('-' * len(self_name)),
      }


def file_to_dict(filename, reverse=0):
    '''
    Takes the filename of a colon-separated file and returns a dictionary
    containing the keys and values from that file.
    '''
    
    f = open(filename, 'r')
    lines = [line.rstrip() for line in f.readlines()]
    f.close()
    
    output_dict = {}
    for line in lines:
        if ":" in line:
            key = line.split(":")[0]
            value = line.split(":")[1]
            output_dict[key] = value
                
    return output_dict


def dict_to_string(d):
    s = ""
    for key in d.keys():
        s += "%s:%s\n" % (key, d[key])
    return s.rstrip()


if len(sys.argv) < 3 or "-h" in sys.argv or "--help" in sys.argv:
    print usage
    exit()

user_hash_filename = sys.argv[1]
hash_password_filename = sys.argv[2]
    
user_hash = file_to_dict(user_hash_filename)
hash_password = file_to_dict(hash_password_filename)

user_password = {}

for user in user_hash.keys():
    password_hash = user_hash[user]
    password = hash_password.get(password_hash)

    if password != None: user_password[user]=password
    
print dict_to_string(user_password)
